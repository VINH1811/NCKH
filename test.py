import streamlit as st
import pandas as pd
import joblib
import plotly.graph_objects as go
from datetime import datetime
import json
import os
import base64
# Th√™m import numpy n·∫øu ch∆∞a c√≥
import numpy as np

# Load d·ªØ li·ªáu g·ªëc ƒë·ªÉ t√≠nh t·ª∑ l·ªá
file_path = "german_credit_data.csv"  # ƒê·∫£m b·∫£o file n√†y t·ªìn t·∫°i trong th∆∞ m·ª•c l√†m vi·ªác
try:
    df = pd.read_csv(file_path)
    if "Unnamed: 0" in df.columns:
        df = df.drop(columns=["Unnamed: 0"])
except FileNotFoundError:
    st.error("File 'german_credit_data.csv' kh√¥ng t·ªìn t·∫°i. Vui l√≤ng cung c·∫•p file d·ªØ li·ªáu ƒë·ªÉ t√≠nh t·ª∑ l·ªá r·ªßi ro t·ª´ng ƒë·∫∑c tr∆∞ng.")
    df = None

# T√≠nh t·ª∑ l·ªá r·ªßi ro x·∫•u cho t·ª´ng ƒë·∫∑c tr∆∞ng
def calculate_risk_rates(df, feature):
    if df is None:
        return {}
    risk_rates = df.groupby(feature)["Risk"].value_counts(normalize=True).unstack().fillna(0)
    risk_rates["Bad_Rate"] = risk_rates["bad"] * 100
    return risk_rates["Bad_Rate"].to_dict()

# T√≠nh t·ª∑ l·ªá r·ªßi ro cho t·ª´ng ƒë·∫∑c tr∆∞ng
if df is not None:
    age_risk_dict = calculate_risk_rates(df, "Age")
    job_risk_dict = calculate_risk_rates(df, "Job")
    credit_amount_risk_dict = calculate_risk_rates(df, "Credit amount")
    duration_risk_dict = calculate_risk_rates(df, "Duration")
    sex_risk_dict = calculate_risk_rates(df, "Sex")
    housing_risk_dict = calculate_risk_rates(df, "Housing")
    saving_risk_dict = calculate_risk_rates(df, "Saving accounts")
    checking_risk_dict = calculate_risk_rates(df, "Checking account")
    purpose_risk_dict = calculate_risk_rates(df, "Purpose")
else:
    age_risk_dict = job_risk_dict = credit_amount_risk_dict = duration_risk_dict = sex_risk_dict = housing_risk_dict = saving_risk_dict = checking_risk_dict = purpose_risk_dict = {}
# ========== C·∫§U H√åNH TRANG ==========
st.set_page_config(
    page_title="CreditRisk AI",
    page_icon="üè¶",
    layout="wide",
    initial_sidebar_state="expanded"
)

def local_image_base64(path):
    if not os.path.exists(path):
        st.error(f"·∫¢nh kh√¥ng t·ªìn t·∫°i: {path}")
        return ""
    with open(path, "rb") as f:
        data = f.read()
    return base64.b64encode(data).decode()

# Load ·∫£nh n·ªÅn t·ª´ local v√† encode base64
bg1 = local_image_base64("ad2.jpg")
bg2 = local_image_base64("risk2.jpg")
bg3 = local_image_base64("chiuu.jpg")

# ========== C·∫§U H√åNH TRANG ==========
# Ch√®n CSS v√†o ·ª©ng d·ª•ng
st.markdown(f"""
<style>
/* Import font Lato */
@import url("https://fonts.googleapis.com/css?family=Lato:400,700");

:root {{
    --primary: #2568FB;
    --secondary: #F8F9FA;
    --text: #2C3E50;
    --success: #28B463;
    --danger: #E74C3C;
}}

body, html {{
    margin: 0;
    padding: 0;
    height: 100vh;
    overflow: hidden;
    font-family: "Lato", sans-serif;
    color: white;
}}

/* Sidebar t√πy ch·ªânh */
[data-testid="stSidebar"] {{
    background: transparent;
    color: white;
    z-index: 10;
    height: 100vh;
    background-color:rgba(240, 240, 240, 0);
    backdrop-filter: blur(15px);
    box-shadow: 0px 0px 10px rgba(0, 0, 0, 0.1);
}}

/* TƒÉng ƒë·ªô t∆∞∆°ng ph·∫£n cho ch·ªØ trong sidebar */
[data-testid="stSidebar"] h1,
[data-testid="stSidebar"] label {{
    text-shadow: 0 2px 4px rgba(0, 0, 0, 0.5);
}}

/* T√πy ch·ªânh ti√™u ƒë·ªÅ trong sidebar */
[data-testid="stSidebar"] h1 {{
    color: white;
    text-align: center;
    font-size: 2em;
    margin-bottom: 20px;
   
}}

/* T√πy ch·ªânh nh√£n c·ªßa radio button */
[data-testid="stSidebar"] [data-testid="stRadio"] label {{
    color: white;
    font-size: 1.2em;
}}

/* ƒê·∫£m b·∫£o c√°c ph·∫ßn t·ª≠ con c·ªßa label c≈©ng c√≥ m√†u tr·∫Øng */
[data-testid="stSidebar"] [data-testid="stRadio"] label div {{
    color: white !important;
}}

/* Button style v·ªõi hi·ªáu ·ª©ng hover chuy·ªÉn m√†u ƒë·ªè */
.stButton {{
    position: relative;
    display: flex;
    justify-content: center; /* CƒÉn gi·ªØa n√∫t trong c·ªôt */
    margin: 10px;
}}

.stButton > button {{
    width: 200px;
    color: white;
    font-family: Helvetica, sans-serif;
    font-weight: bold;
    font-size: 20px; /* Gi·∫£m k√≠ch th∆∞·ªõc ch·ªØ */
    text-align: center;
    text-decoration: none;
    background-color:rgba(240, 240, 240, 0);
    backdrop-filter: blur(15px);
    box-shadow: 0px 0px 10px rgba(0, 0, 0, 0.1);
    display: block;
    position: relative;
    padding: 15px 24px; /* TƒÉng padding */
    -webkit-tap-highlight-color: rgba(0, 0, 0, 0);
    text-shadow: 0px 1px 0px #000;
    -webkit-border-radius: 5px;
    -moz-border-radius: 5px;
    border-radius: 5px;
    z-index: 4;
    transition: background-color 0.3s ease;
    white-space: nowrap; /* NgƒÉn n·ªôi dung xu·ªëng d√≤ng */
    height : 100px
}}

.stButton > button:hover {{
    background-color: var(--danger);
    color: black;
}}

/* ƒê·∫£m b·∫£o kh√¥ng c√≥ kho·∫£ng c√°ch th·ª´a ph√≠a tr√™n n√∫t */
.stButton {{
    margin-top: 0;
}}
/* Th·∫ª th√¥ng tin */
.custom-card {{
    border-radius: 12px;
    padding: 20px;
    background: white;
    box-shadow: 0 4px 12px rgba(0,0,0,0.05);
    margin-bottom: 20px;
    border: 1px solid #EDF2F7;
    z-index: 3;
}}

/* Slideshow n·ªÅn to√†n m√†n h√¨nh */
.slideshow-background {{
    position: fixed;
    top: 0;
    left: 0;
    width: 100vw;
    height: 100vh;
    background-size: cover;
    background-position: center;
    z-index: 1;
    animation: slide 9s infinite, zoom 3s infinite;
}}

/* Keyframes chuy·ªÉn ·∫£nh t·ª´ base64 */
@keyframes slide {{
    0%, 30% {{
        background-image: url("data:image/jpg;base64,{bg1}");
        opacity: 1;
    }}
    33.33%, 63.33% {{
        background-image: url("data:image/jpg;base64,{bg2}");
        opacity: 1;
    }}
    66.66%, 96.66% {{
        background-image: url("data:image/jpg;base64,{bg3}");
        opacity: 1;
    }}
    31%, 32%, 64.66%, 65.66%, 97.66%, 99% {{
        opacity: 0;
    }}
}}

/* Hi·ªáu ·ª©ng zoom nh·∫π */
@keyframes zoom {{
    0% {{ transform: scale(1); }}
    50% {{ transform: scale(1.1); }}
    100% {{ transform: scale(1); }}
}}

/* Overlay l√†m m·ªù n·ªÅn */
.overlay {{
    background: rgba(0, 0, 0, 0.3);
    position: fixed;
    top: 0; left: 0;
    width: 100vw;
    height: 100vh;
    z-index: 2;
}}

/* N·ªôi dung trung t√¢m */
.content {{
    position: relative;
    z-index: 3;
    color: white;
    text-align: center;
    padding: 50px 20px;
    min-height: 100vh;
    display: flex;
    flex-direction: column;
    justify-content: center;
    align-items: center;
}}

.content h1 {{
    font-size: 3.5em;
    margin-bottom: 10px;
    text-shadow: 0 2px 4px rgba(0,0,0,0.3);
}}

.content p {{
    font-size: 1.5em;
    opacity: 0.9;
    margin-bottom: 20px;
    max-width: 600px;
}}

.button-container {{
    display: flex;
    gap: 20px;
    flex-wrap: wrap;
    justify-content: center;
    z-index: 4;
}}
</style>
""", unsafe_allow_html=True)

# ========== H√ÄM TI·ªÜN √çCH ==========
@st.cache_resource
def load_model():
    return joblib.load("credit_risk_model.pkl")

@st.cache_resource
def load_preprocessor():
    return joblib.load("preprocessor.pkl")

def save_prediction(data):
    # Ki·ªÉm tra xem file c√≥ t·ªìn t·∫°i kh√¥ng
    if not os.path.exists("history.json"):
        with open("history.json", "w") as f:
            json.dump([], f)  # T·∫°o file m·ªõi v·ªõi m·∫£ng r·ªóng

    # ƒê·ªçc file history.json
    try:
        with open("history.json", "r") as f:
            # Ki·ªÉm tra file r·ªóng
            content = f.read().strip()
            if not content:  # N·∫øu file r·ªóng, g√°n history l√† m·∫£ng r·ªóng
                history = []
            else:
                f.seek(0)  # Quay l·∫°i ƒë·∫ßu file ƒë·ªÉ ƒë·ªçc l·∫°i
                history = json.load(f)  # Th·ª≠ ƒë·ªçc JSON
    except json.JSONDecodeError:
        # N·∫øu file kh√¥ng h·ª£p l·ªá, ghi ƒë√® b·∫±ng m·∫£ng r·ªóng
        st.warning("File history.json kh√¥ng h·ª£p l·ªá, s·∫Ω t·∫°o l·∫°i file m·ªõi.")
        history = []
        with open("history.json", "w") as f:
            json.dump(history, f)

    # Th√™m d·ªØ li·ªáu m·ªõi v√†o history
    history.append(data)

    # Ghi l·∫°i file, ch·ªâ gi·ªØ 10 b·∫£n ghi g·∫ßn nh·∫•t
    with open("history.json", "w") as f:
        json.dump(history[-10:], f)
        
def load_history():
    if not os.path.exists("history.json"):
        return []
    with open("history.json", "r") as f:
        return json.load(f)

# ========== ƒêI·ªÄU H∆Ø·ªöNG ==========
# Kh·ªüi t·∫°o tr·∫°ng th√°i trang
if "page" not in st.session_state:
    st.session_state.page = "üè† Trang ch·ªß"

# C·∫≠p nh·∫≠t gi√° tr·ªã page t·ª´ st.session_state
page = st.session_state.page

# ƒêi·ªÅu h∆∞·ªõng
with st.sidebar:
    st.markdown("<h1 style='color: white; text-align: center;'>üè¶ CreditRisk</h1>", unsafe_allow_html=True)
    page = st.radio(
        "Menu",
        ["üè† Trang ch·ªß", "üìù Ph√¢n t√≠ch m·ªõi", "üïí L·ªãch s·ª≠"],
        label_visibility="collapsed"
    )
    st.session_state.page = page  # C·∫≠p nh·∫≠t tr·∫°ng th√°i khi ng∆∞·ªùi d√πng ch·ªçn t·ª´ sidebar

# ========== TRANG CH·ª¶ (SLIDESHOW FULLSCREEN T·ª∞ ƒê·ªòNG) ==========
if page == "üè† Trang ch·ªß":
    # Ch√®n n·ªÅn v√† overlay
    st.markdown("""
    <div class="slideshow-background"></div>
    <div class="overlay"></div>
    <div class="content">
        <h1>Ch√†o m·ª´ng b·∫°n ƒë·∫øn v·ªõi ch∆∞∆°ng tr√¨nh ph√°t hi·ªán r·ªßi ro t√≠n d·ª•ng trong ng√¢n h√†ng</h1>
        <p>·ª®ng d·ª•ng ph√¢n t√≠ch r·ªßi ro t√≠n d·ª•ng th√¥ng minh gi√∫p b·∫°n ƒë∆∞a ra quy·∫øt ƒë·ªãnh ch√≠nh x√°c v√† nhanh ch√≥ng.</p>
        <h4> S·∫£n ph·∫©m thu·ªôc v·ªÅ Khoa C√¥ng Ngh·ªá Th√¥ng Tin </h4>
    """, unsafe_allow_html=True)

    # D√πng container v√† columns ƒë·ªÉ cƒÉn ch·ªânh n√∫t
    with st.container():
        col1, col2 = st.columns(2, gap="medium") # TƒÉng kho·∫£ng c√°ch gi·ªØa hai c·ªôt
        with col1:
            if st.button("üîÆ B·∫Øt ƒë·∫ßu ph√¢n t√≠ch", key="analyze_btn"):
                st.session_state.page = "üìù Ph√¢n t√≠ch m·ªõi"
        with col2:
            if st.button("üïí Xem l·ªãch s·ª≠", key="history_btn"):
                st.session_state.page = "üïí L·ªãch s·ª≠"

    st.markdown("""
    </div>
    """, unsafe_allow_html=True)

# ========== PH·∫¶N PH√ÇN T√çCH M·ªöI ==========
elif page == "üìù Ph√¢n t√≠ch m·ªõi":
    # T√πy ch·ªânh CSS t·ª´ code m·ªõi
    st.markdown("""
        <style>
        
        .main {
            background-color: #F7F9FC;
            background-image : url("anh2.jpg")
        }
        
        .stButton>button {
            background-color: #2E86C1;
            color: white;
            border-radius: 8px;
            padding: 10px 20px;
            font-weight: bold;
        }
        .stButton>button:hover {
            background-color: #1B4F72;
        }
        .stSlider .st-dn {background-color: #2E86C1;}
        .stRadio>label {font-size: 16px;}
        .stSelectbox>label {font-size: 16px;}
        .stNumberInput>label {font-size: 16px;}
        .tooltip {
            position: relative;
            display: inline-block;
        }
        .tooltip .tooltiptext {
            visibility: hidden;
            width: 220px;
            background-color: #566573;
            color: white;
            text-align: center;
            border-radius: 6px;
            padding: 5px;
            position: absolute;
            z-index: 1;
            bottom: 125%;
            left: 50%;
            margin-left: -110px;
            opacity: 0;
            transition: opacity 0.3s;
        }
        .tooltip:hover .tooltiptext {
            visibility: visible;
            opacity: 1;
        }
        </style>
    """, unsafe_allow_html=True)

    # Load m√¥ h√¨nh v√† b·ªô ti·ªÅn x·ª≠ l√Ω
    model = load_model()
    preprocessor = load_preprocessor()

    # Header
    st.markdown("<h1 style='text-align: center; color: #2E86C1; font-family: Arial;'>üîç D·ª± ƒêo√°n R·ªßi Ro T√≠n D·ª•ng</h1>", unsafe_allow_html=True)
    st.markdown("<h4 style='text-align: center; color: #566573; font-family: Arial;'>Ph√¢n t√≠ch kh·∫£ nƒÉng ho√†n tr·∫£ kho·∫£n vay m·ªôt c√°ch nhanh ch√≥ng v√† ch√≠nh x√°c</h4>", unsafe_allow_html=True)

    # Nh·∫≠p d·ªØ li·ªáu kh√°ch h√†ng
    st.markdown("---")
    st.markdown("<h3 style='color: #2E86C1; font-family: Arial;'>üìã Nh·∫≠p th√¥ng tin kh√°ch h√†ng</h3>", unsafe_allow_html=True)

    col1, col2 = st.columns([1, 1], gap="large")
    with col1:
        with st.expander("Th√¥ng tin c√° nh√¢n", expanded=True):
            age = st.slider("üìÜ Tu·ªïi", 18, 100, 30, help="Ch·ªçn tu·ªïi c·ªßa kh√°ch h√†ng")
            sex = st.radio("üöª Gi·ªõi t√≠nh", ["Nam", "N·ªØ"], horizontal=True)
            sex = "male" if sex == "Nam" else "female"
            job = st.selectbox("üëî Lo·∫°i c√¥ng vi·ªác", ["Kh√¥ng c√≥ k·ªπ nƒÉng & kh√¥ng c∆∞ tr√∫", "Kh√¥ng c√≥ k·ªπ nƒÉng & c∆∞ tr√∫", "C√≥ k·ªπ nƒÉng", "R·∫•t c√≥ k·ªπ nƒÉng"])
            job_mapping = {"Kh√¥ng c√≥ k·ªπ nƒÉng & kh√¥ng c∆∞ tr√∫": 0, "Kh√¥ng c√≥ k·ªπ nƒÉng & c∆∞ tr√∫": 1, "C√≥ k·ªπ nƒÉng": 2, "R·∫•t c√≥ k·ªπ nƒÉng": 3}
            job = job_mapping[job]

    with col2:
        with st.expander("Th√¥ng tin t√†i ch√≠nh & m·ª•c ƒë√≠ch vay", expanded=True):
            credit_amount = st.number_input("üíµ Kho·∫£n vay (USD)", min_value=500, max_value=50000, value=10000, step=100)
            duration = st.slider("üïí Th·ªùi h·∫°n vay (th√°ng)", 6, 72, 24)
            purpose = st.selectbox("üéØ M·ª•c ƒë√≠ch vay", ["Mua √¥ t√¥", "Mua n·ªôi th·∫•t/trang thi·∫øt b·ªã", "Mua radio/TV", "Mua thi·∫øt b·ªã gia d·ª•ng", "S·ª≠a ch·ªØa", "Gi√°o d·ª•c", "Kinh doanh", "Du l·ªãch/Kh√°c"])
            purpose_mapping = {"Mua √¥ t√¥": "car", "Mua n·ªôi th·∫•t/trang thi·∫øt b·ªã": "furniture/equipment", "Mua radio/TV": "radio/TV", "Mua thi·∫øt b·ªã gia d·ª•ng": "domestic appliances",
                               "S·ª≠a ch·ªØa": "repairs", "Gi√°o d·ª•c": "education", "Kinh doanh": "business", "Du l·ªãch/Kh√°c": "vacation/others"}
            purpose = purpose_mapping[purpose]

    col3, col4 = st.columns([1, 1], gap="large")
    with col3:
        with st.expander("T√¨nh tr·∫°ng nh√† ·ªü", expanded=True):
            housing = st.selectbox("üè† H√¨nh th·ª©c nh√† ·ªü", ["S·ªü h·ªØu", "Thu√™", "Mi·ªÖn ph√≠"])
            housing_mapping = {"S·ªü h·ªØu": "own", "Thu√™": "rent", "Mi·ªÖn ph√≠": "free"}
            housing = housing_mapping[housing]

    with col4:
        with st.expander("T√†i kho·∫£n ng√¢n h√†ng", expanded=True):
            st.markdown("""
                <div class="tooltip">
                    üí∞ T√†i kho·∫£n ti·∫øt ki·ªám
                    <span class="tooltiptext">Kh√¥ng c√≥: 0 USD<br>√çt: 1-500 USD<br>Trung b√¨nh: 501-1000 USD<br>Kh√° nhi·ªÅu: 1001-5000 USD<br>Nhi·ªÅu: >5000 USD</span>
                </div>
            """, unsafe_allow_html=True)
            saving_accounts = st.selectbox("", ["Kh√¥ng c√≥", "√çt", "Trung b√¨nh", "Kh√° nhi·ªÅu", "Nhi·ªÅu"], key="savings")
            saving_mapping = {"Kh√¥ng c√≥": "NA", "√çt": "little", "Trung b√¨nh": "moderate", "Kh√° nhi·ªÅu": "quite rich", "Nhi·ªÅu": "rich"}
            saving_accounts = saving_mapping[saving_accounts]

            st.markdown("""
                <div class="tooltip">
                    üè¶ T√†i kho·∫£n v√£ng lai
                    <span class="tooltiptext">Kh√¥ng c√≥: 0 USD<br>√çt: 1-200 USD<br>Trung b√¨nh: 201-500 USD<br>Nhi·ªÅu: >500 USD</span>
                </div>
            """, unsafe_allow_html=True)
            checking_account = st.selectbox("", ["Kh√¥ng c√≥", "√çt", "Trung b√¨nh", "Nhi·ªÅu"], key="checking")
            checking_mapping = {"Kh√¥ng c√≥": "NA", "√çt": "little", "Trung b√¨nh": "moderate", "Nhi·ªÅu": "rich"}
            checking_account = checking_mapping[checking_account]

    # N√∫t d·ª± ƒëo√°n
    st.markdown("<div style='text-align: center;'>", unsafe_allow_html=True)
    if st.button("üìå D·ª± ƒëo√°n ngay", key="predict_button"):
        with st.spinner("‚è≥ ƒêang ph√¢n t√≠ch d·ªØ li·ªáu..."):
            input_data = pd.DataFrame([{
                "Age": age,
                "Job": job,
                "Credit amount": credit_amount,
                "Duration": duration,
                "Sex": sex,
                "Housing": housing,
                "Saving accounts": saving_accounts,
                "Checking account": checking_account,
                "Purpose": purpose
            }])
            input_transformed = preprocessor.transform(input_data)
            prediction = model.predict_proba(input_transformed)[:, 1]
            risk_score = prediction[0]

            # L∆∞u v√†o l·ªãch s·ª≠ (t·ª´ test.py)
            result_data = {
                "input": input_data.to_dict("records")[0],
                "risk_score": float(risk_score),
                "timestamp": datetime.now().strftime("%d/%m/%Y %H:%M")
            }
            save_prediction(result_data)
            st.session_state.current_result = result_data

        # Hi·ªÉn th·ªã k·∫øt qu·∫£ chi ti·∫øt t·ª´ng ƒë·∫∑c tr∆∞ng
        st.markdown("---")
        st.markdown("<h3 style='color: #2E86C1; font-family: Arial;'>üîç Ph√¢n t√≠ch r·ªßi ro t·ª´ng ƒë·∫∑c tr∆∞ng</h3>", unsafe_allow_html=True)
        if df is None:
            st.warning("Kh√¥ng th·ªÉ t√≠nh t·ª∑ l·ªá r·ªßi ro t·ª´ng ƒë·∫∑c tr∆∞ng do thi·∫øu d·ªØ li·ªáu 'german_credit_data.csv'.")
        else:
            feature_contributions = {
                "Tu·ªïi": {"Gi√° tr·ªã": f"{age} tu·ªïi", "T·ª∑ l·ªá r·ªßi ro x·∫•u": f"{age_risk_dict.get(age, 0):.2f}%"},
                "Gi·ªõi t√≠nh": {"Gi√° tr·ªã": "Nam" if sex == "male" else "N·ªØ", "T·ª∑ l·ªá r·ªßi ro x·∫•u": f"{sex_risk_dict.get(sex, 0):.2f}%"},
                "C√¥ng vi·ªác": {"Gi√° tr·ªã": list(job_mapping.keys())[list(job_mapping.values()).index(job)], "T·ª∑ l·ªá r·ªßi ro x·∫•u": f"{job_risk_dict.get(job, 0):.2f}%"},
                "Kho·∫£n vay": {"Gi√° tr·ªã": f"{credit_amount:,} DM", "T·ª∑ l·ªá r·ªßi ro x·∫•u": f"{credit_amount_risk_dict.get(credit_amount, 0):.2f}%"},
                "Th·ªùi h·∫°n": {"Gi√° tr·ªã": f"{duration} th√°ng", "T·ª∑ l·ªá r·ªßi ro x·∫•u": f"{duration_risk_dict.get(duration, 0):.2f}%"},
                "Nh√† ·ªü": {"Gi√° tr·ªã": list(housing_mapping.keys())[list(housing_mapping.values()).index(housing)], "T·ª∑ l·ªá r·ªßi ro x·∫•u": f"{housing_risk_dict.get(housing, 0):.2f}%"},
                "T√†i kho·∫£n ti·∫øt ki·ªám": {"Gi√° tr·ªã": list(saving_mapping.keys())[list(saving_mapping.values()).index(saving_accounts)], "T·ª∑ l·ªá r·ªßi ro x·∫•u": f"{saving_risk_dict.get(saving_accounts, 0):.2f}%"},
                "T√†i kho·∫£n v√£ng lai": {"Gi√° tr·ªã": list(checking_mapping.keys())[list(checking_mapping.values()).index(checking_account)], "T·ª∑ l·ªá r·ªßi ro x·∫•u": f"{checking_risk_dict.get(checking_account, 0):.2f}%"},
                "M·ª•c ƒë√≠ch vay": {"Gi√° tr·ªã": list(purpose_mapping.keys())[list(purpose_mapping.values()).index(purpose)], "T·ª∑ l·ªá r·ªßi ro x·∫•u": f"{purpose_risk_dict.get(purpose, 0):.2f}%"}
            }
            feature_df = pd.DataFrame.from_dict(feature_contributions, orient="index")
            st.table(feature_df.style.set_properties(**{'background-color': '#ECF0F1', 'border-color': '#D5DBDB', 'padding': '8px', 'text-align': 'center'}))

        # Hi·ªÉn th·ªã k·∫øt qu·∫£ t·ªïng h·ª£p
        st.markdown("---")
        st.markdown("<h3 style='color: #2E86C1; font-family: Arial;'>üîπ K·∫øt qu·∫£ D·ª± ƒêo√°n T·ªïng h·ª£p</h3>", unsafe_allow_html=True)
        col_result1, col_result2 = st.columns([1, 2])
        with col_result1:
            if risk_score > 0.5:
                st.error(f"‚ö†Ô∏è **Nguy c∆° t√≠n d·ª•ng x·∫•u: {risk_score:.2%}**")
            else:
                st.success(f"‚úÖ **Kh·∫£ nƒÉng ho√†n tr·∫£ t·ªët: {risk_score:.2%}**")
        with col_result2:
            st.markdown("<p style='color: #566573; font-family: Arial;'>X√°c su·∫•t n√†y ƒë∆∞·ª£c t√≠nh d·ª±a tr√™n m√¥ h√¨nh v·ªõi d·ªØ li·ªáu ƒë·∫ßu v√†o.</p>", unsafe_allow_html=True)

        # Bi·ªÉu ƒë·ªì tr·ª±c quan
        st.markdown("---")
        st.markdown("<h3 style='color: #2E86C1; font-family: Arial;'>üìä Ph√¢n t√≠ch r·ªßi ro</h3>", unsafe_allow_html=True)
        col_chart1, col_chart2 = st.columns(2)
        with col_chart1:
            fig1 = go.Figure(go.Indicator(
                mode="gauge+number",
                value=risk_score * 100,
                title={"text": "Nguy c∆° t√≠n d·ª•ng x·∫•u (%)", "font": {"size": 16}},
                gauge={
                    "axis": {"range": [0, 100]},
                    "bar": {"color": "#E74C3C" if risk_score > 0.5 else "#28B463"},
                    "steps": [
                        {"range": [0, 50], "color": "#D5F5E3"},
                        {"range": [50, 100], "color": "#FADBD8"}
                    ],
                    "threshold": {"line": {"color": "black", "width": 4}, "thickness": 0.75, "value": 50}
                }
            ))
            st.plotly_chart(fig1, use_container_width=True)

        with col_chart2:
            labels = ["Ho√†n tr·∫£ t·ªët", "N·ª£ x·∫•u"]
            values = [1 - risk_score, risk_score]
            fig3 = go.Figure(data=[go.Pie(labels=labels, values=values, hole=0.4)])
            fig3.update_traces(marker=dict(colors=["#28B463", "#E74C3C"]))
            fig3.update_layout(title="T·ª∑ l·ªá r·ªßi ro t√≠n d·ª•ng", title_x=0.5)
            st.plotly_chart(fig3, use_container_width=True)

    st.markdown("</div>", unsafe_allow_html=True)
# ========== PH·∫¶N L·ªäCH S·ª¨ ==========
elif page == "üïí L·ªãch s·ª≠":
    st.markdown("<h1 style='color: var(--text); text-align: center;'>üïí L·ªãch s·ª≠ ph√¢n t√≠ch</h1>", unsafe_allow_html=True)
    history = load_history()
    if not history:
        st.warning("Ch∆∞a c√≥ l·ªãch s·ª≠ ph√¢n t√≠ch")
    else:
        for idx, item in enumerate(reversed(history)):
            risk_score = item["risk_score"]
            with st.expander(f"Ph√¢n t√≠ch #{len(history)-idx} - {item['timestamp']} - {risk_score:.1%}"):
                col1, col2 = st.columns(2)
                with col1:
                    for key, value in item["input"].items():
                        st.write(f"{key}: {value}")
                with col2:
                    st.markdown(f"R·ªßi ro: **{risk_score:.1%}** {'(Cao)' if risk_score > 0.5 else '(Th·∫•p)'}")

# Footer
st.markdown("<div style='text-align: center; color: var(--text); opacity: 0.7; margin-top: 50px;'>¬© 2025 CreditRisk AI</div>", unsafe_allow_html=True)
